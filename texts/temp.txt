Ważnym momentem w historii Pythona było utworzenie drugiej głównej gałęzi  - Pythona 3 w roku 2008. Od tego momentu wersja 2 oraz 3 były rozwijane oddzielnie, ale czas wersji 2 zaczyna mijać o czym świadczy ogłoszony już termin zakończenia wsparcia na 12 kwietnia 2020 roku. Rozwój języka jest prowadzony przy wykorzystaniu PEP (Python Enhancement Proposal). Dokumenty te to propozycje rozszerzeń lub zmian w języku w postaci artykułu, który jest poddawany pod dyskusję wśród programistów Pythona. Każdy dokument zawiera opis proponowanego rozwiązania, uzasadnienie oraz aktualny status. Po osiągnięciu konsensusu propozycje są przyjmowane lub odrzucane. 2. WYBRANE CECHY JĘZYKA PYTHON Python jest językiem ogólnego przeznaczenia, którego ideą przewodnią jest czytelność i klarowność kodu źródłowego. Standardowa implementacja języka jest CPython (napisany w C), ale istnieją też inne, np. Jython (napisany w Javie), CLPython napisany w Common Lisp, IronPython (na platformę .NET) i PyPy napisany w Pythonie. Python nie wymusza jednego stylu programowania dając możliwość programowania obiektowego, programowania strukturalnego oraz programowania funkcyjnego. Inne cechy języka Python:   Typy sprawdzane są dynamicznie (w przeciwieństwie np. do Javy),   Do zarządzania pamięcią używany jest garbage collector,   Wszystkie wartości przekazywane są przez referencję,   Jest czasem kwalifikowany jako język skryptowy,   Nie ma enkapsulacji, jak to ma miejsce w C++ czy Javie, ale istnieją mechanizmy, które pozwalają na osiągnięcie podobnego efektu,   Możliwe jest tworzenie funkcji ze zmienną liczbą argumentów,   Możliwe jest tworzenie funkcji z argumentami o wartościach domyślnych. Wprowadzenie do języka Python 4 3. PYTHON I DATA SCIENCE Python nie jest jedynym ani też jednoznacznie najlepszym językiem dla Data Science. Jego największym konkurentem w tej dziedzinie jest R, który od samego początku był tworzony z myślą o statystyce, która jak wiadomo w dziedzinie sztucznej inteligencji ma szerokie zastosowanie. Trwają niezliczone spory i porównania próbujące udowodnić wyższość jednego rozwiązania nad drugim. Skoro jednak będziemy zajmować się Pythonem przytoczę kilka jego zalet pod kątem Data Science: a) Python jest językiem ogólnego przeznaczenia co powoduje, że oprócz możliwości wykorzystania specjalistycznych bibliotek np. pod Data Science można bez konieczności integracji z innymi rozwiązaniami zbudować kompletną aplikację desktopową lub webową, b) Python jako język skryptowy, i dodatkowo w połączeniu z Jupyter (IPython) notebook, pozwala na bardzo szybkie testowanie i prototypowanie poprzez pisanie kodu  "na bieżąco ", co powoduje brak konieczności kompilowania kodu i jego późniejszego uruchamiania co znacznie przyspiesza proces stworzenia działającego rozwiązania, c) Bogata paleta bardzo dobrej jakości bibliotek dla AI (Artificial Intelligence) i DS (Data Science). Za przykład mogą tutaj posłużyć NumPy, Pandas, SciPy, matplotlib czy scikit-learn, które zostaną zaprezentowane na zajęciach  "Zaawansowany Python ". d) Społeczność  - jako język ogólnego zastosowania społecznoścs Pythona jest bardzo duża co przekłada się na łatwość uzyskania odpowiedzi na pytania, sporą ilość dobrej dokumentacji oraz rozbudowaną listę bibliotek i dodatków. Polecam dość zwięzły artykuł, który rzuci nieco światła na to dlaczego warto używać Pythona w Data Science oraz czego wciąż w nim brakuje, aby mógł stać się jeszcze lepszym narzędziem. https://www.quora.com/Why-is-Python-a-language-of-choice-for-data-scientists 4. PREZENTACJA ŚRODOWISKA PYCHARM COMMUNITY EDITION W trakcie zajęć prezentacja przykładów kodu oraz ćwiczenia będą wykonywane z wykorzystaniem środowiska PyCharm Community, które jest darmową wersją tego narzędzia. Wersja Community pozbawiona jest wielu udogodnień, które mogą przydać się na dalszym etapie pracy z językiem Python np. w trakcie wytwarzania aplikacji webowych z wykorzystaniem m.in. Django, Flask, JavaScript oraz wielu innych. Mamy natomiast do dyspozycji  "inteligentny " edytor, graficzny debugger, inspekcję kodu, wsparcie dla systemów kontroli wersji oraz pakiet narzędzi naukowych. Bardziej szczegółowe porównanie można znaleźć pod adresem: https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html Firma JetBrains, która jest autorem m.in. oprogramowania PyCharm oferuje pełen pakiet oprogramowania w wersji Professional za darmo dla studentów oraz nauczycieli. Aby taką licencję uzyskać należy się zarejestrować i aplikować o przyznanie takiej licencji. Jedyne ograniczenie to wykorzystywanie tego oprogramowania do celów komercyjnych. Więcej tutaj: https://www.jetbrains.com/student/ . Wprowadzenie do języka Python 5 5. ORGANIZACJA KODU WEDŁUG PEP8 Jak zostało już wspomniane w 1 zmiany w specyfikacji języka odbywają się poprzez system PEP. Dokument o numerze PEP8 jest jedną (ale nie jedyną) propozycją organizacji kodu języka Python. Oryginalna treść dokumentu dostępna jest pod adresem https://www.python.org/dev/peps/pep-0008/. 5.1. WCIĘCIA W kodzie języka Python nie znajdziemy znanych z PHP, Javy czy C# klamerek do separacji bloków kodu, określania ram ciała metody czy klasy lub zakresu operacji w pętli. Tutaj do tego celu służą odpowiednio ustawione wcięcia i puste linie między w/w elementami. Dla osób, które nigdy wcześniej nie miały do czynienia z taką organizacją kodu może to być zaskakujące, ale dość szybko staje się zrozumiałe i intuicyjne. Przykład: if score >= 100: print("Zwycięstwo !") Każdy kolejny poziom zagnieżdżenia w bloku kodu poprzedza odstęp w postaci wielokrotności 4 spacji (pojedyncza wartość wcięcia). Dopuszczalne jest również stosowanie tabulatorów jako wcięć, ale zalecane są spacje a dodatkowo w wersji Python 3 użycie jednocześnie spacji i tabulatorów jako wcięć nie jest dozwolone. Wcięcia używamy również w sytuacjach, w których linia kodu jest zbyt długa i musi być złamana na większą ilość wierszy. Zalecana długość linii według PEP8 to 79 znaków. Przykład: wyslane = wyslij_wiadomosc(e_mail_odbiorcy, temat, wiadomosc) W takim przypadku wcięcie sięga znaku otwarcia deklaracji listy atrybutów wywoływanej metody lub funkcji. Dopuszczalne są jednak odstępstwa od tej reguły pozwalające na zastosowanie mniejszego wcięcia dla kolejnych linii. Przykład: wyslane = wyslij_wiadomosc(e_mail_odbiorcy, temat, wiadomosc) Jednak sama dokumentacja mówi o tym, że jest to opcjonalne formatowanie, więc należy go używać tylko z konieczności a nie jako regułę. Deklaracja zmiennych takich jak lista, tablica, krotka czy słownik dzięki wcięciom często poprawia ich czytelność co jest główną zasadą, która kierowano się określając reguły formatowania kodu w Pythonie. Przykład: lista = [ 1,2,3, 4,5,6, ] Wprowadzenie do języka Python 6 W przypadku łamania linii i operatorów np.. arytmetycznych obowiązuje zasada przenoszenia operatora do nowej linii. Przykład: zysk = (przychod - koszty - podatki) 5.2. PUSTE LINIE Funkcje najwyższego rzędu oraz definicje klas oddzielamy od pozostałych bloków kodu dwiema pustymi liniami. Przykład: def zrob_cos(): return "zrobione" def tez_cos_zrob(): return "też zrobione" Metody klas oraz funkcje lokalne oddzielone są natomiast pojedynczą pustą linią. Przykład: class Osoba: def __init__(self, imie, nazwisko, plec): self.imie = imie self.nazwisko = nazwisko self.plec = plec def przedstaw_sie(self): print("Nazywam się {0} {1}".format(self.imie, self.nazwisko)) def moj_wiek(self): print("Moja płeć to: {0}.".format(self.plec)) os = Osoba("Krzysztof", "Ropiak", "mężczyzna") os.przedstaw_sie() os.moj_wiek() Przykład: def funkcja_top_level(): def funkcja_lokalna(): pass def kolejna_funkcja_lokalna(): pass Wprowadzenie do języka Python 7 Pojedyncze puste linie mogą być również stosowane wewnątrz funkcji aby odseparować od siebie logiczne sekcje funkcji. 5.3. IMPORT Poszczególne instrukcje importu powinny być rozdzielone na oddzielne linie. Przykład: Tak import os import sys Nie import sys, os Poprawny jest natomiast taki sposób definiowania importu: from subprocess import Popen, PIPE Inne zasady dotyczące organizacji importów. Importy powinny być umieszczane na początku pliku tuż za ewentualnymi komentarzami dla modułu i elementami docstring. Kolejnośc importów ma również znaczenie. Oto zalecany porządek:   import bibliotek standardowych   import powiązanych bibliotek zewnętrznych (ang. third party imports)   import lokalnych aplikacji/bibliotek Zalecane jest również dodawanie pustej linii po każdej z w/w grup importów. Jako, że Python umożliwia zarówno import całej biblioteki lub tylko wybranych jej modułów często trzeba dobrać odpowiedni sposób do sytuacji, ale z reguły zaleca się wykonywanie importu i dodanie aliasu lub import modułu zamiast np. konkretnej klasy z tego modułu co zmniejsza ryzyko wystąpienia konfliktów w przestrzeni nazw. Więcej informacji oraz przykłady znajdują się w rozdziale poświęconym zarządzaniu i importowi pakietów. Wprowadzenie do języka Python 8 5.4. INNE ZALECENIA 1. Zmienne typu string można umieszczać zarówno w cudzysłowie lub w apostrofach, gdyż w przypadku Pythona nie ma to znaczenia. Natomiast PEP8 nie zaleca żonglowania tym zapisem i trzymania się jednej z opcji. Sytuacją, w której dozwolone jest użycie obu jednocześnie jest ciąg tekstowy, który sam już zawiera cudzysłów lub apostrof  - wtedy należy użyć drugiego z nich. Przykład: artykul = 'Recenzja "Władcy Pierścieni".' Ale można również tak: artykul = "Recenzja \"Władcy Pierścieni\"." lub tak artykul = """Recenzja "Władcy Pierścieni".""" 2. Spacje w wyrażeniach i definicjach są pożądane, ale nie należy ich nadużywać. Przykład: dobrze: zakupy(szynka[1], {jajka: 2}) x = 1 lista[index] lista[1:4] źle: zakupy( szynka[ 1 ], { jajka: 2 } ) x=1 lista [index] lista[1: 4] Wszystkie operatory binarne powinny być otoczone pojedynczą spacją. Ćwiczenia Zasad, które opisane są w dokumencie PEP8 jest więcej, ale nie wszystkie będą tutaj przytoczone. Poświęć ok. 15 minut na zapoznanie się z dokumentem PEP8 (link na początku rozdziału) i przejrzyj pokazane tam przykładowe fragmenty kodu. Zwróć uwagę na informacje w sekcji  "Comments " oraz  "Naming Conventions ". Na sam koniec warto dodać, że edytor środowiska PyCharm posiada zaimplementowany mechanizm formatowania kodu wg. PEP8 więc nawet jak złamiemy zasadę wcięć, odstępów lub inną, zostaniemy o tym fakcie poinformowani co umożliwi dokonanie poprawek lub skorzystanie z automatycznego formatowania. Czasem jednak automatyczne formatowanie potrafi się pogubić... Wprowadzenie do języka Python 9 6. PODSTAWOWE TYPY DANYCH Zanim przejdziemy do omawiania poszczególnych typów danych warto wiedzieć, że Python jest językiem  "typowanym dynamicznie ". Oznacza to, że typ danych jaki zostanie wykorzystany do przechowania wartości przypisanej do zmiennej często zależy od wartości jaka zostanie do zmiennej przypisana co znacznie różni się od sposobu w jaki typy są przypisywane do zmiennych w Javie czy C++. Takie rozwiązanie ma zarówno wady jak i zalety. Do wad można zaliczyć to, że pierwotny typ zmiennej może ulec zmianie w dalszej części kodu co wymusza na programiście większą kontrolę tego co dzieje się z tą zmienną i czasami trzeba stosować funkcje, które sprawdzają typ przekazanych danych. Nie możemy też w żaden sposób wymusić przekazania do metody danych określonego typu lub określić jaki typ danych zostanie zwrócony. Zaletą dynamicznego typowania jest większa elastyczność języka i możliwość zmiany typu w locie co eliminuje konieczność jawnego deklarowania nowych zmiennych do przechowywania danych pod postacią innego typu (rzutowanie jawne i niejawne). Kolejna istotna informacja jest taka, że Python jest językiem zorientowanym obiektowo i wszystko w Pythonie jest obiektem* o czym świadczy chociażby to, że właściwie wszystkie zmienne posiadają metody, które można na nich wykonać. * to stwierdzenie może nie być prawdą, jeżeli porównać definicje obiektu w innych językach programowania, ale z punktu widzenia Pythona i jego twórców jest prawdą. Wprowadzenie do języka Python 10 6.1. KILKA SŁÓW O OPERATORACH Zanim omówione zostaną typy danych warto poznać kilka operatorów, które w powiązaniu ze zmiennymi są często używane. Python w bardziej złożonych wyrażeniach wykonuje działania w określonej kolejności: 1. najpierw ** 2. następnie *, / oraz % 3. a dopiero na końcu + i - W Pythonie jako fałsz traktowane są:   liczba zero (0, 0.0, 0j itp.)   False   None (null)   puste kolekcje ([], (), {}, set() itp.)   puste napisy   w Pythonie 2  - obiekty posiadające metodę __nonzero__(), jeśli zwraca ona False lub 0   w Pythonie 3  - obiekty posiadające metodę __bool__(), jeśli zwraca ona False # operatory arytmetyczne suma = 1 + 2 * 3 / 4.0 # modulo czyli reszta z dzielenia reszta = 12 % 5 kwadrat = 5 ** 2 szescian = 5 ** 3 # operacje na napisach full_name = "Krzysztof" + " " + "Ropiak" # ale to ? spam = "SPAM " * 10 print(spam) # listy oceny = [1, 2, 3, 4, 5] * 10 print(oceny) # operatory porównania liczba1 = 1 liczba2 = 2 print(liczba1 > liczba2) print(liczba1 <= liczba2) print(liczba1 == liczba2) print(liczba1 != liczba2) # powyższe porównania zwrócą wartości logiczne czyli True lub False # na wartościach logicznych możemy również wykonywac operacje prawda = True falsz = False print(prawda and falsz) print(prawda or falsz) print(not prawda) print(not not prawda) print(bool(prawda or falsz)) Wprowadzenie do języka Python 11 6.2. TYPY LICZBOWE Dwa główne typy liczbowe Pythona to liczba całkowita oraz rzeczywiste czyli integer i float. Jest jeszcze typ complex, który służy do przechowywania wartości liczb zespolonych, ale zapoznanie się z informacjami na jego temat pozostawiam czytelnikowi. W przypadku liczb rzeczywistych można również określić precyzję z jaką zostaną wyświetlone, ale stosowny przykład znajduje się w kolejnym podrozdziale. całkowita = 5 rzeczywista = 5.6 rzeczywista = float(56) # powyższy sposób to rzutowanie # poniżej kolejny przykład liczba_str = "123" liczba = int(liczba_str) print(type(liczba)) # zmienne można również zadeklarować w jednej linii a, b = 3, 4 Wprowadzenie do języka Python 12 6.3. TYP TEKSTOWY We fragmentach kodu w poprzednich rozdziałach znalazło się już kilka przykładów deklaracji zmiennej typu string. Dla przypomnienia: Powyższy fragment to tylko przykład różnych metod deklaracji, w trakcie zajęć będzie stosowany sposób zalecany przez PEP8 czyli cudzysłów. Ciąg tekstowy w Pythonie to tablica znaków co daje z miejsca wiele możliwości manipulacji i dostępu do składowych tego ciągu. Inna ważna cecha stringów to fakt, że po ich zadeklarowaniu nie możemy zmienić zadeklarowanych znaków ciągu. Oczywiście możemy nadpisać zmienną nową wartością lub dokleić do niej kolejny ciąg tekstowy, ale pierwotny fragment jest niezmienny. Poniżej kilka przykładów. artykul = """Recenzja "Władcy Pierścieni".""" imie = 'Krzysztof' hobby = "piłka nożna" imie = "Krzysztof" nazwisko = "Ropiak" # string to tablica znaków więc możemy odwołać się do jej elementów print(imie[0]) # indeks elementu możemy również określać jako pozycja od końca ciągu print(imie[-1]) # można również pobrać fragment ciągu (slice) określając jako indeks # element początkowy i końcowy. Zwróć uwagę na wartość tych indeksów. print(imie[0] + imie[-2] + imie[4:6]) # można również określic tylko jeden z dwóch indeksów print(imie + nazwisko[3:]) # inny sposób złączania ciągów print(imie + " " + nazwisko) # Elementów ciągu nie można zmieniać więc poniższa instrukcja zwróci błąd. # nazwisko[0] = "P" # Potwierdzeniem tego, że ciąg tekstowy jej również obiektem jest możliwość # wykonania na nim metod dla tego typu zdefiniowanych. Metoda count() zlicza # ilość wystąpień danego ciągu w wartości przechowywanej przez zmienną. print(imie.count("z")) # Co ciekawe w Pythonie możemy wywoływać funkcje dla danego obiektu już podczas deklaracji # co na pierwszy rzut oka może wyglądać dość egzotycznie. print("Jesteś szalona!".count("a")) # Potwierdzeniem niezmienności zadeklarowanego stringa może być również poniższy kod print(imie.lower()) print(imie) # Aby zwrócić długość ciągu tekstowego należy posłużyć się wbudowaną funkcją len() print(len(nazwisko)) Wprowadzenie do języka Python 13 Ciągi tekstowe bardzo często są  "dekorowane " innymi wartościami przed ich wydrukowaniem na konsolę. Ciąg wyjściowy może być zlepkiem innych ciągów i/lub liczb, ale nie możemy tak po prostu wykonać poniższej operacji: Interpreter Pythona zwróci błąd z informacją, że nie może wykonać niejawnej konwersji z typu int na typ string. Poniżej listing z możliwościami jakie mamy do dyspozycji. print("Ala ma " + 4 + " lata") # formatowanie znane z Pythona 2.x wyznanie = "Lubię %s" % "Pythona" print(wyznanie) wonsz = "Python" print("Lubię %sa" % wonsz) print("Lubię %s oraz %sa" % ("Pythona", wonsz)) # %s oznacza, że w miejsce tego znacznika będzie podstawiany ciąg tekstowy # %i - to liczba całkowita # %f - liczba rzeczywista lub inaczej zmiennoprzecinkowa # %x lub #X - liczba całkowita zapisana w formie szesnastkowej print("Używamy wersji Python %i" % 3) print("A dokładniej Python %f" % 3.5) print("Chociaż lepiej to zapisać jako Python %.1f" % 3.5) print("A kolejną glówną wersją Pythona może być wersja %.4f" % 3.6666) print("A może będzie to wersja %.1f ?" % 3.6666) print("A może jednak %.f ?" % 3.6666) wersja = 4 print("A %i w systemie szesnastkowym to %X" % (wersja, wersja)) print("A %i * %i szesnastkowo daje %X" % (wersja, wersja, wersja*wersja)) # Chociaż możliwości przy korzystaniu z mechanizmów powyżej są spore, # to i kilka wad się również znajdzie. Trzeba pilnować zarówno liczby argumentów jak # i ich kolejności. Konieczne jest powielanie tej samej zmiennej jeżeli kilka # razy jest wykorzystywana w formatowanym ciągu. Spójrzmy na inne możliwości. print("Lubię %(jezyk)s" % {"jezyk": "Pythona"}) print("Lubię %(jezyk)s a czy Ty lubisz %(jezyk)s ?" % {"jezyk": "Pythona"}) # wadą jest dość duża ilość dodatkowego kodu do napisania, ale nazwy zmiennych # w ciągu pozwalają na ich szybką identyfikację i wielokrotne wykorzystanie w # dowolnej kolejności # poniżej kolejny sposób print("Lubię język {1} oraz {0}".format("Java", "Python")) # w nowej wersji języka Python możliwe jest również odwoływanie się do elementów kolekcji # lub pól klasy class Osoba: def __init__(self, imie, nazwisko): self.imie = imie self.nazwisko = nazwisko kr = Osoba("Krzysztof", "Ropiak") print("Tą osobą jest {0.imie} {0.nazwisko}".format(kr)) Wprowadzenie do języka Python 14 Mimo, iż ilość przykładów i sposobów tutaj przedstawionych jest dość duża i wyczerpuje większość najczęstszych przypadków to w dokumentacji można znaleźć jeszcze wiele dodatkowych możliwości. Po więcej przykładów można udać się pod poniższe adresy: 1. https://docs.python.org/3/library/string.html#format-string-syntax 2. https://pyformat.info/ Ćwiczenia 1. Pobierz ze strony https://pl.lipsum.com/ tekst akapitu o tytule  "Czym jest Lorem Ipsum " i przypisz go do zmiennej. 2. Wyświetl na konsoli tekst postaci  "W tekście jest {liczba_liter1} liter ... oraz {liczba_liter2} liter ... " . W miejsca { } podstaw zmienne, które będą przechowywały liczbę wystąpień danych liter. Litery, które mają być wyszukane powinny zostać przekazane jako indeks do 3 znaku nazwiska oraz 2 znaku imienia osoby wykonującej ćwiczenie, np. imie =  "Krzysztof ", nazwisko =  "Ropiak ", litera_1 = imie[2], litera_2 = nazwisko[3]. 3. Przejdź na stronę https://pyformat.info/ a następnie zapisz w oddzielnym pliku .py i wykonaj 5 wybranych przykładów formatowania ciągów oznaczonego jako  "New ", których nie było w przykładach z tego podrozdziału (np. z wyrównaniem, ilością pozycji liczby, znakiem itp.). 4. Mając dany poniższy fragment kodu (kod umieść w pliku): Pod zmienna_typu_string podstaw dowolny ciąg tekstowy  - może być jako odwołanie do zmiennej lub bezpośrednio ciąg tekstowy. Następnie z listy metod, które wyświetli pierwsze polecenie wybierz jedną z funkcji, która nie była omawiana w podrozdziale (wybierz z tych, które w nazwie nie posiadają __ na początku i końcu) i podstaw pod tekst wybrana_funkcja w drugim wyrażeniu. Uruchom ten fragment kodu. Pojawi się opis działania wybranej funkcji. Teraz przytrzymaj klawisz CTRL i najedź kursorem myszy na nazwę wybranej funkcji w kodzie i wciśnij lewy klawisz myszy. W ten sposób można szybko przenieść się do pliku źródłowego z definicją funkcji i jej krótkim opisem. 5. Wyszukaj w Internecie pojęcie  "extended slice " w kontekście Pythona i wyświetl swoje imię i nazwisko z odwróconą kolejnością znaków z kapitalikami. Np. Fotzsyzrk Kaipor print(dir(zmienna_typu_string)) help(zmienna_typu_string.wybrana_funkcja) Wprowadzenie do języka Python 15 6.4. LISTY Lista w języku Python to kolekcja, którą można porównać do tablic w innych językach programowania. Ważną cechą list jest to, że mogą przechowywać różne typy danych. Rozmiar tablicy ograniczony jest możliwościami sprzętu. Listę możemy zainicjalizować w poniższy sposób: Do elementów listy odwołujemy się tak samo jak do elementów ciągu tekstowego gdyż tam również mamy do czynienia z listą (chociaż są to obiekty typu string). Możemy również umieszczać listy w liście, co daje nam listy wielopoziomowe. Po wypisaniu takiej listy otrzymamy: W Pythonie można też w łatwy sposób łączyć ze sobą listy: Obie metody różnią się od siebie tym, że pierwsza modyfikuje już istniejącą listę, a druga wymaga podstawienia połączonej listy pod zmienną gdyż sama arytmetyczna operacja  "+ " nie spowoduje zmiany pierwotnej listy. lista = [] lista2 = list() lista3 = [1, 2, 3] lista4 = ["a", 5, "Python", 7.8] lista5 = [lista3, lista4] [[1, 2, 3], ['a', 5, 'Python', 7.8]] lista3.extend(lista4) print(lista3) wyjście -> [1, 2, 3, 'a', 5, 'Python', 7.8] # lub w prostszy sposób lista6 = lista3 + lista4 print(lista6) Wyjście -> [1, 2, 3, 'a', 5, 'Python', 7.8] Wprowadzenie do języka Python 16 Niektóre metody, które można wykonać na obiekcie listy wykonują się jako operacje in-place co oznacza, że operacja wykonywana jest bez zwracania nowej wartości przez co nie można zmienionej tablicy przypisać do innej zmiennej. Poniżej przykład z sortowaniem: Wartość None w Pythonie odpowiada wartości Null w innych językach programowania. Nie możemy też posortować tablicy, w której znajdują się liczby oraz ciągi tekstowe. Listy mogą być  "cięte " (ang. sliced) tak jak ciągi tekstowe przedstawione w poprzednim rozdziale. Dodawanie, usuwanie i zmiana wartości elementów listy może być wykonywana na wiele sposobów. Poniżej listing z niektórymi z nich. Do usuwania elementów listy można wykorzystać również wbudowaną funkcję del(), która nie zwraca żadnej wartości. Za jej pomocą można również usuwać zmienne. lista7 = [7, 9, 3, 1] posortowana = lista7.sort() print(lista7) print(posortowana) # wyjście [1, 3, 7, 9] None # wstawianie i usuwanie elementów listy skala = [1, 2, 3, 4, 5] # dodajemy element na końcu listy skala.append(6) print(skala) # znamy już sposób odwoływania się do elementu listy poprzez indeks więc można # wartości listy ustawiać w ten sposób, ale nie da się wstawić wartośći na # indeksie, który nie istnieje skala[6] = 7 # zostanie zwrócony błąd IndexError: list assignment index out of range # ale można zrobić to np. tak skala[6:] = [7] # lub tak skala[len(skala):] = [7] # alternatywnym sposobem jest wywołanie metody insert skala.insert(6, 7) print(skala) # usuwamy element z końca listy co powoduje, że z wykorzystaniem # tych metod osiągamy funkcję stosu skala.pop() print(skala) # pop może również przyjmować indeks elementu do usunięcia. # Metoda pop zwraca również wartość elementu usuwanego skala.pop(2) print(skala) Wprowadzenie do języka Python 17 W tym rozdziale zostały zaprezentowane podstawy jeżeli chodzi o operacje na listach. Python oferuje wiele bardziej rozbudowanych możliwości generowania, wybierania, sortowania list jednak najpierw muszą zostać wprowadzone takie pojęcia jak pętla czy instrukcja warunkowa. W dokumentacji można również znaleźć przykłady korzystające z instrukcji lambda, ale jej użycie będzie omawiane szerzej podczas zajęć z zaawansowanego Pythona. Ćwiczenia 1. Stwórz listę z wartościami od 1 do 10. Następnie podziel listę tak, aby pierwsze 5 liczb zostało w oryginalnej liście a pozostałe 5 znalazło się w nowej liście. 2. Połącz te listy ponownie. Dodaj do listy wartość  "0 " na początku. Utwórz kopię połączonej listy i wyświetl listę posortowaną malejąco. 3. Za pomocą rzutowania stringa na listę wykonaj ćwiczenie 5 z podrozdziału 6.2. Wprowadzenie do języka Python 18 6.5. SŁOWNIKI Słowniki to tablica mieszająca lub inaczej tablica z haszowaniem, którą można porównać do tablic asocjacyjnych znanych z innych języków programowania. Słowniki przechowują pary klucz:wartość i właśnie po kluczu odbywa się wy